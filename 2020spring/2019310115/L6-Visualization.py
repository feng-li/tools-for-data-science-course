{
  "cells": [
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "#  逻辑回归与数据可视化"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "## Titanic 逻辑回归分析"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "### 导入Titanic数据"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 1,
    "metadata": {},
    "outputs": [],
    "source": [
     "import seaborn as sns"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 2,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>survived</th>\n",
        "      <th>pclass</th>\n",
        "      <th>sex</th>\n",
        "      <th>age</th>\n",
        "      <th>sibsp</th>\n",
        "      <th>parch</th>\n",
        "      <th>fare</th>\n",
        "      <th>embarked</th>\n",
        "      <th>class</th>\n",
        "      <th>who</th>\n",
        "      <th>adult_male</th>\n",
        "      <th>deck</th>\n",
        "      <th>embark_town</th>\n",
        "      <th>alive</th>\n",
        "      <th>alone</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>male</td>\n",
        "      <td>22.0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>7.2500</td>\n",
        "      <td>S</td>\n",
        "      <td>Third</td>\n",
        "      <td>man</td>\n",
        "      <td>True</td>\n",
        "      <td>NaN</td>\n",
        "      <td>Southampton</td>\n",
        "      <td>no</td>\n",
        "      <td>False</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>female</td>\n",
        "      <td>38.0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>71.2833</td>\n",
        "      <td>C</td>\n",
        "      <td>First</td>\n",
        "      <td>woman</td>\n",
        "      <td>False</td>\n",
        "      <td>C</td>\n",
        "      <td>Cherbourg</td>\n",
        "      <td>yes</td>\n",
        "      <td>False</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>female</td>\n",
        "      <td>26.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>7.9250</td>\n",
        "      <td>S</td>\n",
        "      <td>Third</td>\n",
        "      <td>woman</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>Southampton</td>\n",
        "      <td>yes</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>female</td>\n",
        "      <td>35.0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>53.1000</td>\n",
        "      <td>S</td>\n",
        "      <td>First</td>\n",
        "      <td>woman</td>\n",
        "      <td>False</td>\n",
        "      <td>C</td>\n",
        "      <td>Southampton</td>\n",
        "      <td>yes</td>\n",
        "      <td>False</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>male</td>\n",
        "      <td>35.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>8.0500</td>\n",
        "      <td>S</td>\n",
        "      <td>Third</td>\n",
        "      <td>man</td>\n",
        "      <td>True</td>\n",
        "      <td>NaN</td>\n",
        "      <td>Southampton</td>\n",
        "      <td>no</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>886</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>male</td>\n",
        "      <td>27.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>13.0000</td>\n",
        "      <td>S</td>\n",
        "      <td>Second</td>\n",
        "      <td>man</td>\n",
        "      <td>True</td>\n",
        "      <td>NaN</td>\n",
        "      <td>Southampton</td>\n",
        "      <td>no</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>887</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>female</td>\n",
        "      <td>19.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>30.0000</td>\n",
        "      <td>S</td>\n",
        "      <td>First</td>\n",
        "      <td>woman</td>\n",
        "      <td>False</td>\n",
        "      <td>B</td>\n",
        "      <td>Southampton</td>\n",
        "      <td>yes</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>888</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>female</td>\n",
        "      <td>NaN</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>23.4500</td>\n",
        "      <td>S</td>\n",
        "      <td>Third</td>\n",
        "      <td>woman</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>Southampton</td>\n",
        "      <td>no</td>\n",
        "      <td>False</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>889</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>male</td>\n",
        "      <td>26.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>30.0000</td>\n",
        "      <td>C</td>\n",
        "      <td>First</td>\n",
        "      <td>man</td>\n",
        "      <td>True</td>\n",
        "      <td>C</td>\n",
        "      <td>Cherbourg</td>\n",
        "      <td>yes</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>890</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>male</td>\n",
        "      <td>32.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>7.7500</td>\n",
        "      <td>Q</td>\n",
        "      <td>Third</td>\n",
        "      <td>man</td>\n",
        "      <td>True</td>\n",
        "      <td>NaN</td>\n",
        "      <td>Queenstown</td>\n",
        "      <td>no</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>891 rows × 15 columns</p>\n",
        "</div>"
       ],
       "text/plain": [
        "     survived  pclass     sex   age  sibsp  parch     fare embarked   class  \\\n",
        "0           0       3    male  22.0      1      0   7.2500        S   Third   \n",
        "1           1       1  female  38.0      1      0  71.2833        C   First   \n",
        "2           1       3  female  26.0      0      0   7.9250        S   Third   \n",
        "3           1       1  female  35.0      1      0  53.1000        S   First   \n",
        "4           0       3    male  35.0      0      0   8.0500        S   Third   \n",
        "..        ...     ...     ...   ...    ...    ...      ...      ...     ...   \n",
        "886         0       2    male  27.0      0      0  13.0000        S  Second   \n",
        "887         1       1  female  19.0      0      0  30.0000        S   First   \n",
        "888         0       3  female   NaN      1      2  23.4500        S   Third   \n",
        "889         1       1    male  26.0      0      0  30.0000        C   First   \n",
        "890         0       3    male  32.0      0      0   7.7500        Q   Third   \n",
        "\n",
        "       who  adult_male deck  embark_town alive  alone  \n",
        "0      man        True  NaN  Southampton    no  False  \n",
        "1    woman       False    C    Cherbourg   yes  False  \n",
        "2    woman       False  NaN  Southampton   yes   True  \n",
        "3    woman       False    C  Southampton   yes  False  \n",
        "4      man        True  NaN  Southampton    no   True  \n",
        "..     ...         ...  ...          ...   ...    ...  \n",
        "886    man        True  NaN  Southampton    no   True  \n",
        "887  woman       False    B  Southampton   yes   True  \n",
        "888  woman       False  NaN  Southampton    no  False  \n",
        "889    man        True    C    Cherbourg   yes   True  \n",
        "890    man        True  NaN   Queenstown    no   True  \n",
        "\n",
        "[891 rows x 15 columns]"
       ]
      },
      "execution_count": 2,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "sns.load_dataset(\"titanic\")"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 3,
    "metadata": {},
    "outputs": [],
    "source": [
     "titanic = sns.load_dataset(\"titanic\")"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "## 变量初步可视化及筛选"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 4,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      },
      "metadata": {
       "needs_background": "light"
      },
      "output_type": "display_data"
     }
    ],
    "source": [
     "sns.swarmplot(x=\"who\", y=\"adult_male\", data=titanic);"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 5,
    "metadata": {},
    "outputs": [],
    "source": [
     "x=[2,8,10,11,12,13]\n",
     "titanic.drop(titanic.columns[x], axis=1, inplace=True)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 6,
    "metadata": {},
    "outputs": [],
    "source": [
     "titanic = titanic.dropna()#删除缺失值"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>survived</th>\n",
        "      <th>pclass</th>\n",
        "      <th>age</th>\n",
        "      <th>sibsp</th>\n",
        "      <th>parch</th>\n",
        "      <th>fare</th>\n",
        "      <th>embarked</th>\n",
        "      <th>who</th>\n",
        "      <th>alone</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>22.0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>7.2500</td>\n",
        "      <td>S</td>\n",
        "      <td>man</td>\n",
        "      <td>False</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>38.0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>71.2833</td>\n",
        "      <td>C</td>\n",
        "      <td>woman</td>\n",
        "      <td>False</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>26.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>7.9250</td>\n",
        "      <td>S</td>\n",
        "      <td>woman</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>35.0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>53.1000</td>\n",
        "      <td>S</td>\n",
        "      <td>woman</td>\n",
        "      <td>False</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>35.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>8.0500</td>\n",
        "      <td>S</td>\n",
        "      <td>man</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>885</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>39.0</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "      <td>29.1250</td>\n",
        "      <td>Q</td>\n",
        "      <td>woman</td>\n",
        "      <td>False</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>886</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>27.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>13.0000</td>\n",
        "      <td>S</td>\n",
        "      <td>man</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>887</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>19.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>30.0000</td>\n",
        "      <td>S</td>\n",
        "      <td>woman</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>889</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>26.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>30.0000</td>\n",
        "      <td>C</td>\n",
        "      <td>man</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>890</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>32.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>7.7500</td>\n",
        "      <td>Q</td>\n",
        "      <td>man</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>712 rows × 9 columns</p>\n",
        "</div>"
       ],
       "text/plain": [
        "     survived  pclass   age  sibsp  parch     fare embarked    who  alone\n",
        "0           0       3  22.0      1      0   7.2500        S    man  False\n",
        "1           1       1  38.0      1      0  71.2833        C  woman  False\n",
        "2           1       3  26.0      0      0   7.9250        S  woman   True\n",
        "3           1       1  35.0      1      0  53.1000        S  woman  False\n",
        "4           0       3  35.0      0      0   8.0500        S    man   True\n",
        "..        ...     ...   ...    ...    ...      ...      ...    ...    ...\n",
        "885         0       3  39.0      0      5  29.1250        Q  woman  False\n",
        "886         0       2  27.0      0      0  13.0000        S    man   True\n",
        "887         1       1  19.0      0      0  30.0000        S  woman   True\n",
        "889         1       1  26.0      0      0  30.0000        C    man   True\n",
        "890         0       3  32.0      0      0   7.7500        Q    man   True\n",
        "\n",
        "[712 rows x 9 columns]"
       ]
      },
      "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "titanic"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "## 逻辑回归"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "### 导入包"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 8,
    "metadata": {},
    "outputs": [],
    "source": [
     "from sklearn.linear_model import LogisticRegression\n",
     "import numpy as np\n",
     "import matplotlib.pyplot as plt\n",
     "import pandas as pd\n",
     "from sklearn import model_selection#拆分训练集和测试集\n",
     "from sklearn.metrics import confusion_matrix#输出混淆矩阵"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "### 数值化处理"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 9,
    "metadata": {},
    "outputs": [],
    "source": [
     "titanic_dummy = pd.get_dummies(titanic[['who', 'embarked','alone']])"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 10,
    "metadata": {},
    "outputs": [],
    "source": [
     "titanic_conti = pd.DataFrame(titanic, columns=['survived', 'pclass', 'age', 'sibsp', 'parch', 'fare'], index=titanic.index)\n",
     "titanic = titanic_conti.join(titanic_dummy)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 11,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>survived</th>\n",
        "      <th>pclass</th>\n",
        "      <th>age</th>\n",
        "      <th>sibsp</th>\n",
        "      <th>parch</th>\n",
        "      <th>fare</th>\n",
        "      <th>alone</th>\n",
        "      <th>who_child</th>\n",
        "      <th>who_man</th>\n",
        "      <th>who_woman</th>\n",
        "      <th>embarked_C</th>\n",
        "      <th>embarked_Q</th>\n",
        "      <th>embarked_S</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>22.0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>7.2500</td>\n",
        "      <td>False</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>38.0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>71.2833</td>\n",
        "      <td>False</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>26.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>7.9250</td>\n",
        "      <td>True</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>35.0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>53.1000</td>\n",
        "      <td>False</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>4</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>35.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>8.0500</td>\n",
        "      <td>True</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>885</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>39.0</td>\n",
        "      <td>0</td>\n",
        "      <td>5</td>\n",
        "      <td>29.1250</td>\n",
        "      <td>False</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>886</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>27.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>13.0000</td>\n",
        "      <td>True</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>887</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>19.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>30.0000</td>\n",
        "      <td>True</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>889</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>26.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>30.0000</td>\n",
        "      <td>True</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>890</td>\n",
        "      <td>0</td>\n",
        "      <td>3</td>\n",
        "      <td>32.0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>7.7500</td>\n",
        "      <td>True</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>712 rows × 13 columns</p>\n",
        "</div>"
       ],
       "text/plain": [
        "     survived  pclass   age  sibsp  parch     fare  alone  who_child  who_man  \\\n",
        "0           0       3  22.0      1      0   7.2500  False          0        1   \n",
        "1           1       1  38.0      1      0  71.2833  False          0        0   \n",
        "2           1       3  26.0      0      0   7.9250   True          0        0   \n",
        "3           1       1  35.0      1      0  53.1000  False          0        0   \n",
        "4           0       3  35.0      0      0   8.0500   True          0        1   \n",
        "..        ...     ...   ...    ...    ...      ...    ...        ...      ...   \n",
        "885         0       3  39.0      0      5  29.1250  False          0        0   \n",
        "886         0       2  27.0      0      0  13.0000   True          0        1   \n",
        "887         1       1  19.0      0      0  30.0000   True          0        0   \n",
        "889         1       1  26.0      0      0  30.0000   True          0        1   \n",
        "890         0       3  32.0      0      0   7.7500   True          0        1   \n",
        "\n",
        "     who_woman  embarked_C  embarked_Q  embarked_S  \n",
        "0            0           0           0           1  \n",
        "1            1           1           0           0  \n",
        "2            1           0           0           1  \n",
        "3            1           0           0           1  \n",
        "4            0           0           0           1  \n",
        "..         ...         ...         ...         ...  \n",
        "885          1           0           1           0  \n",
        "886          0           0           0           1  \n",
        "887          1           0           0           1  \n",
        "889          0           1           0           0  \n",
        "890          0           0           1           0  \n",
        "\n",
        "[712 rows x 13 columns]"
       ]
      },
      "execution_count": 11,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "titanic"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "### 逻辑回归"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "#### 划分训练集和测试集"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 12,
    "metadata": {},
    "outputs": [],
    "source": [
     "X = titanic.iloc[:, 1:]\n",
     "y = titanic.iloc[:, 0]\n",
     "X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.3, random_state=0)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 13,
    "metadata": {},
    "outputs": [],
    "source": [
     "# 基于训练集使用逻辑回归建模\n",
     "classifier = LogisticRegression(random_state=0,solver='liblinear')\n",
     "classifier.fit(X_train, y_train)\n",
     " \n",
     "# 将模型应用于测试集并查看混淆矩阵\n",
     "y_pred = classifier.predict(X_test)"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "#### 混淆矩阵分析"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 14,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
       "[[105  20]\n",
       " [ 27  62]]\n"
      ]
     }
    ],
    "source": [
     "confusion_matrix = confusion_matrix(y_test, y_pred)\n",
     "print(confusion_matrix)  "
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 15,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "0.780373831775701"
       ]
      },
      "execution_count": 15,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "classifier.score(X_test, y_test)#正确率"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "## 例二：面膜数据可视化"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 16,
    "metadata": {},
    "outputs": [],
    "source": [
     "import pandas as pd\n",
     "import matplotlib.pyplot as plt\n",
     "import seaborn as sns\n",
     "import numpy as np\n",
     "\n",
     "#解决中文显示问题\n",
     "from pylab import *  \n",
     "mpl.rcParams['font.sans-serif'] = ['SimHei'] #用来正常显示中文标签\n",
     "plt.rcParams['axes.unicode_minus'] = False  #用来正常显示负号"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 17,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>名称</th>\n",
        "      <th>价格</th>\n",
        "      <th>月销量</th>\n",
        "      <th>评价数</th>\n",
        "      <th>店铺所在地</th>\n",
        "      <th>适合肤质</th>\n",
        "      <th>产地</th>\n",
        "      <th>补水保湿</th>\n",
        "      <th>美白提亮</th>\n",
        "      <th>控油祛痘</th>\n",
        "      <th>清洁毛孔</th>\n",
        "      <th>提拉紧致</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <td>0</td>\n",
        "      <td>ANGLEE</td>\n",
        "      <td>254.0</td>\n",
        "      <td>40</td>\n",
        "      <td>3133</td>\n",
        "      <td>湖南</td>\n",
        "      <td>任何肤质</td>\n",
        "      <td>中国</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>1</td>\n",
        "      <td>ANGLEE</td>\n",
        "      <td>350.0</td>\n",
        "      <td>62</td>\n",
        "      <td>876</td>\n",
        "      <td>浙江</td>\n",
        "      <td>任何肤质</td>\n",
        "      <td>中国</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>2</td>\n",
        "      <td>ANGLEE</td>\n",
        "      <td>284.9</td>\n",
        "      <td>12</td>\n",
        "      <td>16</td>\n",
        "      <td>浙江</td>\n",
        "      <td>任何肤质</td>\n",
        "      <td>中国</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>3</td>\n",
        "      <td>BF</td>\n",
        "      <td>289.0</td>\n",
        "      <td>32</td>\n",
        "      <td>175</td>\n",
        "      <td>英国</td>\n",
        "      <td>任何肤质</td>\n",
        "      <td>中国</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <td>4</td>\n",
        "      <td>BSR</td>\n",
        "      <td>379.9</td>\n",
        "      <td>1407</td>\n",
        "      <td>13870</td>\n",
        "      <td>安徽</td>\n",
        "      <td>任何肤质</td>\n",
        "      <td>中国</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "text/plain": [
        "       名称     价格   月销量    评价数 店铺所在地  适合肤质  产地  补水保湿  美白提亮  控油祛痘  清洁毛孔  提拉紧致\n",
        "0  ANGLEE  254.0    40   3133    湖南  任何肤质  中国     1     1     0     0     0\n",
        "1  ANGLEE  350.0    62    876    浙江  任何肤质  中国     1     1     0     0     0\n",
        "2  ANGLEE  284.9    12     16    浙江  任何肤质  中国     1     0     1     1     0\n",
        "3      BF  289.0    32    175    英国  任何肤质  中国     1     0     0     0     0\n",
        "4     BSR  379.9  1407  13870    安徽  任何肤质  中国     1     0     0     0     0"
       ]
      },
      "execution_count": 17,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "mask = pd.read_csv('mask.csv',encoding=\"gbk\")   #数据来源狗熊会\n",
     "mask.head()"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "### 数据清洗"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 18,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
       "['中国' '日本' '韩国' '美国' '英国' '其他/other']\n",
       "['湖南' '浙江' '英国' '安徽' '广东' '湖北' '江苏' '上海' '江西' '北京' '海外' '天津' '山东' '河南'\n",
       " '新加坡' '河北' '辽宁' '四川' '重庆' '福建' '内蒙古' '海南' '云南' '广西' '陕西' '黑龙江']\n",
       "['任何肤质' '干性肤质' '油性及混合性肤质' '中性及干性肤质' '混合型肤质' '敏感性肤质' '中性肤质' '油性肤质']\n"
      ]
     }
    ],
    "source": [
     "print(mask['产地'].unique())\n",
     "print(mask['店铺所在地'].unique())\n",
     "print(mask['适合肤质'].unique())"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 19,
    "metadata": {},
    "outputs": [],
    "source": [
     "mask.loc[mask.店铺所在地 == '英国','店铺所在地']= '海外'\n",
     "mask.loc[mask.店铺所在地 == '新加坡','店铺所在地'] = '海外'\n",
     "mask.loc[mask.产地 == '其他/other','产地'] = '其他'\n",
     "mask.loc[mask.适合肤质 != '任何肤质','适合肤质'] = '其他'"
    ]
   },
   {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
     "### 数据可视化"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 20,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x1a1e0b1450>"
       ]
      },
      "execution_count": 20,
      "metadata": {},
      "output_type": "execute_result"
     },
     {
      "data": {
       "image/png": "iVBORw0KGgoAAAANSUhEUgAAAtMAAAE9CAYAAADJUu5eAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAUqklEQVR4nO3df4xlZ3kf8O9jbyCB1rJhx2C8dtdQQ2MiENZguSRUFAqYlGALQWQKZAVGm7YugSZRMOUPO6oskTYpAUpRt2CwK2LXcgh2I0pwXQhBqYG1wy/boWxMai827BB+RaQyXXj6x1wn02XWnn13ztyZ3c9HWs09zzn3fZ6r/eero/eeW90dAADgyJ0w7wEAAGCrEqYBAGCQMA0AAIOEaQAAGCRMAwDAIGEaAAAGbZv3AEdj+/btvXPnznmPAQDAMe622277RncvHFrf0mF6586d2bt377zHAADgGFdV/3u1um0eAAAwSJgGAIBBwjQAAAwSpgEAYJAwDQAAg4RpAAAYJEwDAMAgYRoAAAYJ0wAAMEiYBgCAQZOF6aq6qqoOVNUXD6m/vqq+VFV3VNW/WVF/c1Xtm5174VRzAQDAetk24drvT/Lvk1zzYKGq/mGSC5M8rbsfqKpTZ/Vzklyc5KlJnpDkv1fVk7v7B2tt9rhnv34dR/8bX/+jd06yLgAAW99kd6a7+xNJvnlI+Z8leWt3PzC75sCsfmGS67r7ge7+SpJ9Sc6bajYAAFgPG71n+slJnl1Vn6qqP6yqZ87qpye5d8V1+2c1AADYtKbc5nG4fqckOT/JM5NcX1VPTFKrXNurLVBVu5PsTpIzzzxzojEBAODhbfSd6f1JPtjLPp3kh0m2z+pnrLhuR5L7Vlugu/d092J3Ly4sLEw+MAAAHM5Gh+kPJXluklTVk5M8Isk3ktyU5OKqemRVnZXk7CSf3uDZAADgiEy2zaOqrk3ynCTbq2p/ksuTXJXkqtnj8r6fZFd3d5I7qur6JHcmOZjk0iN5kgcAAMzDZGG6u19xmFOvOsz1Vya5cqp5AABgvfkFRAAAGCRMAwDAIGEaAAAGCdMAADBImAYAgEHCNAAADBKmAQBgkDANAACDhGkAABgkTAMAwCBhGgAABm2b9wBb1WkvfMsk697/B1dOsi4AAOvPnWkAABgkTAMAwCBhGgAABgnTAAAwSJgGAIBBwjQAAAwSpgEAYJAwDQAAg4RpAAAYJEwDAMAgYRoAAAZNFqar6qqqOlBVX1zl3K9WVVfV9tlxVdU7qmpfVX2+qs6dai4AAFgvU96Zfn+SCw4tVtUZSZ6f5J4V5RclOXv2b3eSd084FwAArIvJwnR3fyLJN1c59bYkv5akV9QuTHJNL7s1yclVddpUswEAwHrY0D3TVfWSJF/t7s8dcur0JPeuON4/qwEAwKa1baMaVdWjkrwlyQtWO71KrVeppap2Z3krSM4888x1mw8AAI7URt6ZflKSs5J8rqr+PMmOJLdX1eOzfCf6jBXX7khy32qLdPee7l7s7sWFhYWJRwYAgMPbsDDd3V/o7lO7e2d378xygD63u7+W5KYkvzB7qsf5Sb7T3fdv1GwAADBiykfjXZvkfyZ5SlXtr6pLHuLyDye5O8m+JP8pyT+fai4AAFgvk+2Z7u5XPMz5nSted5JLp5oFAACm4BcQAQBgkDANAACDhGkAABgkTAMAwCBhGgAABgnTAAAwaMN+Tpyjc/pFb51k3a9+6LJJ1gUAOB64Mw0AAIOEaQAAGCRMAwDAIGEaAAAGCdMAADBImAYAgEHCNAAADBKmAQBgkDANAACDhGkAABgkTAMAwCBhGgAABgnTAAAwSJgGAIBBwjQAAAwSpgEAYNBkYbqqrqqqA1X1xRW1f1tVf1pVn6+q36uqk1ece3NV7auqL1XVC6eaCwAA1suUd6bfn+SCQ2o3J/mp7n5akv+V5M1JUlXnJLk4yVNn7/kPVXXihLMBAMBRmyxMd/cnknzzkNpHu/vg7PDWJDtmry9Mcl13P9DdX0myL8l5U80GAADrYZ57pl+b5L/NXp+e5N4V5/bPagAAsGnNJUxX1VuSHEzygQdLq1zWh3nv7qraW1V7l5aWphoRAAAe1oaH6araleTFSV7Z3Q8G5v1Jzlhx2Y4k9632/u7e092L3b24sLAw7bAAAPAQNjRMV9UFSd6U5CXd/VcrTt2U5OKqemRVnZXk7CSf3sjZAADgSG2bauGqujbJc5Jsr6r9SS7P8tM7Hpnk5qpKklu7+5929x1VdX2SO7O8/ePS7v7BVLMBAMB6mCxMd/crVim/9yGuvzLJlVPNAwAA680vIAIAwCBhGgAABgnTAAAwSJgGAIBBwjQAAAwSpgEAYJAwDQAAg4RpAAAYJEwDAMAgYRoAAAYJ0wAAMEiYBgCAQcI0AAAMEqYBAGCQMA0AAIOEaQAAGCRMAwDAIGEaAAAGCdMAADBImAYAgEHCNAAADBKmAQBgkDANAACDJgvTVXVVVR2oqi+uqD2mqm6uqi/P/p4yq1dVvaOq9lXV56vq3KnmAgCA9TLlnen3J7ngkNplSW7p7rOT3DI7TpIXJTl79m93kndPOBcAAKyLycJ0d38iyTcPKV+Y5OrZ66uTXLSifk0vuzXJyVV12lSzAQDAetjoPdOP6+77k2T299RZ/fQk9664bv+sBgAAm9Zm+QJirVLrVS+s2l1Ve6tq79LS0sRjAQDA4W10mP76g9s3Zn8PzOr7k5yx4rodSe5bbYHu3tPdi929uLCwMOmwAADwUDY6TN+UZNfs9a4kN66o/8LsqR7nJ/nOg9tBAABgs9o21cJVdW2S5yTZXlX7k1ye5K1Jrq+qS5Lck+Tls8s/nORnk+xL8ldJXjPVXAAAsF4mC9Pd/YrDnHreKtd2kkunmgUAAKawWb6ACAAAW44wDQAAg4RpAAAYJEwDAMAgYRoAAAYJ0wAAMEiYBgCAQWsK01V1y1pqAABwPHnIH22pqh9P8qgs/4rhKUlqduqkJE+YeDYAANjUHu4XEH8xyRuzHJxvy9+E6e8medeEcwEAwKb3kGG6u9+e5O1V9frufucGzQQAAFvCw92ZTpJ09zur6llJdq58T3dfM9FcAACw6a0pTFfVf07ypCSfTfKDWbmTCNMAABy31hSmkywmOae7e8phAABgK1lrmP5ikscnuX/CWdhEnvhP3j7Junf/zhsmWRcAYB7WGqa3J7mzqj6d5IEHi939kkmmAgCALWCtYfqKKYcAAICtaK1P8/jDqQcBAICtZq1P8/jLLD+9I0kekeTHknyvu0+aajAAANjs1npn+m+vPK6qi5KcN8lEAACwRZww8qbu/lCS567zLAAAsKWsdZvHS1ccnpDl50575jQAAMe1tT7N4+dWvD6Y5M+TXLju0wAAwBay1j3Tr1nPplX1L5O8Lst3t7+Q5DVJTktyXZLHJLk9yau7+/vr2RcAANbTmvZMV9WOqvq9qjpQVV+vqt+tqh0jDavq9CS/lGSxu38qyYlJLk7yG0ne1t1nJ/lWkktG1gcAgI2y1i8gvi/JTUmekOT0JP91Vhu1LclPVNW2JI/K8s+UPzfJDbPzVye56CjWBwCAya01TC909/u6++Ds3/uTLIw07O6vJvnNJPdkOUR/J8ltSb7d3Qdnl+3PcmgHAIBNa61h+htV9aqqOnH271VJ/mKkYVWdkuUvL56V5Tvdj07yolUuXfVpIVW1u6r2VtXepaWlkREAAGBdrDVMvzbJzyf5WpbvJr8sy18aHPGPknylu5e6+/8m+WCSZyU5ebbtI0l2JLlvtTd3957uXuzuxYWFoZvjAACwLtYapv91kl3dvdDdp2Y5XF8x2POeJOdX1aOqqpI8L8mdST6W5ZCeJLuS3Di4PgAAbIi1humndfe3Hjzo7m8mecZIw+7+VJa/aHh7lh+Ld0KSPUnelOSXq2pfkscmee/I+gAAsFHW+qMtJ1TVKQ8G6qp6zBG890d09+VJLj+kfHeS80bXBACAjbbWQPxbSf64qm7I8hcDfz7JlZNNBQAAW8BafwHxmqram+VnQVeSl3b3nZNOBgAAm9yat2rMwrMADQAAM2v9AiIAAHAIYRoAAAYJ0wAAMEiYBgCAQcI0AAAMEqYBAGCQMA0AAIOEaQAAGCRMAwDAIGEaAAAGCdMAADBImAYAgEHCNAAADBKmAQBgkDANAACDhGkAABgkTAMAwCBhGgAABgnTAAAwSJgGAIBBcwnTVXVyVd1QVX9aVXdV1d+vqsdU1c1V9eXZ31PmMRsAAKzVvO5Mvz3JR7r77yV5epK7klyW5JbuPjvJLbNjAADYtDY8TFfVSUn+QZL3Jkl3f7+7v53kwiRXzy67OslFGz0bAAAciXncmX5ikqUk76uqP6mq91TVo5M8rrvvT5LZ31PnMBsAAKzZPML0tiTnJnl3dz8jyfdyBFs6qmp3Ve2tqr1LS0tTzQgAAA9rHmF6f5L93f2p2fENWQ7XX6+q05Jk9vfAam/u7j3dvdjdiwsLCxsyMAAArGbDw3R3fy3JvVX1lFnpeUnuTHJTkl2z2q4kN270bAAAcCS2zanv65N8oKoekeTuJK/JcrC/vqouSXJPkpfPaTbm4JzX7Zlk3Tvfs3uSdQEAkjmF6e7+bJLFVU49b6NnAQCAUX4BEQAABgnTAAAwSJgGAIBBwjQAAAwSpgEAYJAwDQAAg4RpAAAYJEwDAMAgYRoAAAYJ0wAAMEiYBgCAQcI0AAAMEqYBAGCQMA0AAIOEaQAAGCRMAwDAIGEaAAAGCdMAADBImAYAgEHCNAAADBKmAQBgkDANAACDhGkAABg0tzBdVSdW1Z9U1e/Pjs+qqk9V1Zer6r9U1SPmNRsAAKzFPO9MvyHJXSuOfyPJ27r77CTfSnLJXKYCAIA1mkuYrqodSf5xkvfMjivJc5PcMLvk6iQXzWM2AABYq3ndmf7tJL+W5Iez48cm+XZ3H5wd709y+jwGAwCAtdrwMF1VL05yoLtvW1le5dI+zPt3V9Xeqtq7tLQ0yYwAALAW2+bQ86eTvKSqfjbJjyc5Kct3qk+uqm2zu9M7kty32pu7e0+SPUmyuLi4auCGh3LuL1092dq3v2PXZGsDAJvPht+Z7u43d/eO7t6Z5OIk/6O7X5nkY0leNrtsV5IbN3o2AAA4EpvpOdNvSvLLVbUvy3uo3zvneQAA4CHNY5vHX+vujyf5+Oz13UnOm+c8AABwJDbTnWkAANhShGkAABgkTAMAwCBhGgAABgnTAAAwSJgGAIBBc300HhwPfuay6yZb+5NvvfhHas//9Q9O1u/my1862doAsBW5Mw0AAIOEaQAAGCRMAwDAIGEaAAAGCdMAADBImAYAgEHCNAAADBKmAQBgkDANAACDhGkAABgkTAMAwCBhGgAABm2b9wDA1nbRb/7+ZGt/6FdfPNnaALAe3JkGAIBBwjQAAAwSpgEAYNCGh+mqOqOqPlZVd1XVHVX1hln9MVV1c1V9efb3lI2eDQAAjsQ87kwfTPIr3f2TSc5PcmlVnZPksiS3dPfZSW6ZHQMAwKa14WG6u+/v7ttnr/8yyV1JTk9yYZKrZ5ddneSijZ4NAACOxFz3TFfVziTPSPKpJI/r7vuT5cCd5NT5TQYAAA9vbmG6qv5Wkt9N8sbu/u4RvG93Ve2tqr1LS0vTDQgAAA9jLmG6qn4sy0H6A939wVn561V12uz8aUkOrPbe7t7T3YvdvbiwsLAxAwMAwCrm8TSPSvLeJHd1979bceqmJLtmr3cluXGjZwMAgCMxj58T/+kkr07yhar67Kz2r5K8Ncn1VXVJknuSvHwOswGb3Cvf9dFJ1v3ApS+YZF0Ajm0bHqa7+5NJ6jCnn7eRswAAwNHwC4gAADBImAYAgEHCNAAADBKmAQBgkDANAACDhGkAABgkTAMAwCBhGgAABgnTAAAwSJgGAIBBwjQAAAwSpgEAYNC2eQ8AsJn94lUfn2Td//ja56xa/5Vr/3iSfr/1imdNsi7A8c6daQAAGCRMAwDAIGEaAAAG2TMNcBz79Rv3TrLu5RcuTrIuwGbjzjQAAAwSpgEAYJBtHgBsmN/+6OcmWfeNL3j6qvWr/ujOSfq99tnnTLIusPUI0wCwDm74zL7J1n7ZM//uZGsDR8c2DwAAGOTONABsQR/53D2TrX3B08/8kdon77p/sn4/85On/Ujt9j/7xmT9zn3S9snW5viz6e5MV9UFVfWlqtpXVZfNex4AADicTXVnuqpOTPKuJM9Psj/JZ6rqpu6e5hskAABJ7rjnW5Os+9QzT1m1/mdf++4k/Z70+JMmWZfD21RhOsl5SfZ1991JUlXXJbkwiTANADDo3r/43iTrnvHYR69aX/ruA5P0WzjpkavWv/t/Dk7S76SfePiovNm2eZye5N4Vx/tnNQAA2HSqu+c9w1+rqpcneWF3v252/Ook53X361dcszvJ7tnhU5J8aaDV9iTTfbNBP/22Tr9j+bPpp59+8+t3LH82/Y7ffn+nuxcOLW62bR77k5yx4nhHkvtWXtDde5LsOZomVbW3uxePZg399DsW+h3Ln00//fSbX79j+bPpp9+hNts2j88kObuqzqqqRyS5OMlNc54JAABWtanuTHf3war6F0n+IMmJSa7q7jvmPBYAAKxqU4XpJOnuDyf58MRtjmqbiH76HUP9juXPpp9++s2v37H82fTT7/+zqb6ACAAAW8lm2zMNAABbhjANAACDhGkAABi06b6AuN6q6ook5yd58HcmtyW5dbVad1+xlfody59NP/30m1+/Y/mz6aeffkfWY/Z6uPdG9jqa3kfzf3fMh+mZi7v720lSVScneeNhalux37H82fTTT7/59TuWP5t++ul3ZD2OtvdG9jqa3kNs8wAAgEHCNAAADBKmAQBgkDANAACDhGkAABgkTAMAwKDj4dF4B5JcU1U/nB2fkOQjh6lttX7H8mfTTz/95tfvWP5s+umn35H3OJreG9nraHsPqe4+mvcDAMBxyzYPAAAYJEwDAMAgYRoAAAYJ0wAAMOh4eJoHwDGpqq5Icn6Sg7PStiS3HqaW9ah39xXr+RkAtjphGmBru7i7v50kVXVykjcepna4a0fqAMzY5gEAAIOEaQAAGCRMAwDAIGEaAAAGCdMAADBImAYAgEEejQewdR1Ick1V/XB2fEKSjxymlnWsAzBT3T3vGQAAYEuyzQMAAAYJ0wAAMEiYBgCAQcI0AAAMEqYBAGDQ/wPoMtMH3HDbewAAAABJRU5ErkJggg==\n",
       "text/plain": [
        "<Figure size 864x360 with 1 Axes>"
       ]
      },
      "metadata": {
       "needs_background": "light"
      },
      "output_type": "display_data"
     }
    ],
    "source": [
     "plt.figure(figsize=(12,5))\n",
     "sns.countplot('店铺所在地',data=mask,order = mask['店铺所在地'].value_counts().index,palette='Blues_r')"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
    "outputs": [],
    "source": []
   },