老师，后面有的函数导不进来；
还有我用的python终端做的练习，所以后面pwd的时候找不到地址。
所以那些知识没有在这里体现，但我都认真看了您的笔记！！！

Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32

Warning:
This Python interpreter is in a conda environment, but the environment has
not been activated.  Libraries may fail to load.  To activate this environment
please see https://conda.io/activation

Type "help", "copyright", "credits" or "license" for more information.
>>> 7+3
10
>>> 7-3
4
>>> 7*3
21
>>> 7**3
343
>>> 7^3
4
>>> 7/2
3.5
>>> 7/3
2.3333333333333335
>>> 7//3
2
>>> 7%3
1
>>> 7%4
3
>>> _+3
6
>>> a="tjy"
>>> a
'tjy'
>>> type(a)
<class 'str'>
>>> b="t j y"
>>> b
't j y'
>>> type(b)
<class 'str'>
>>> len(a)
3
>>> len(b)
5
>>> a[0]
't'
>>> a[-1]
'y'
>>> b[2]
'j'
>>> b[1]
' '
>>> a[-0]
't'
>>> a[0:2]
'tj'
>>> a[0]
't'
>>> a[1]
'j'
>>> b[1:3
...
... b[1:3]
  File "<stdin>", line 3
    b[1:3]
    ^
SyntaxError: invalid syntax
>>> b[1:3[
... ]]
  File "<stdin>", line 2
    ]]
    ^
SyntaxError: invalid syntax
>>> b[1:3]
' j'
>>> a[0:5]
'tjy'
>>> a[2:]
'y'
>>> c="tjy"+3*"lyz"
>>> c
'tjylyzlyzlyz'
>>> print("LYZ")
LYZ
>>> print(tjy /n lyz)
  File "<stdin>", line 1
    print(tjy /n lyz)
                   ^
SyntaxError: invalid syntax
>>> print("tjy" /n lyz)
  File "<stdin>", line 1
    print("tjy" /n lyz)
                     ^
SyntaxError: invalid syntax
>>> print("tjy" /n lyz")
  File "<stdin>", line 1
    print("tjy" /n lyz")
                     ^
SyntaxError: invalid syntax
>>> print("tjy /n lyz")
tjy /n lyz
>>> print(r"tjy /n lyz")
tjy /n lyz
>>> print("how stupid \n i was")
how stupid
 i was
>>> print(r"how stupid \n i was")
how stupid \n i was
>>> a=[1,2,3]
>>> type(a)
<class 'list'>
>>> a[1]
2
>>> a.append(4)
>>> a
[1, 2, 3, 4]
>>> a.insert(3,b)
>>> a
[1, 2, 3, 't j y', 4]
>>> a.remove('4')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: list.remove(x): x not in list
>>> a.remove(4)
>>> a
[1, 2, 3, 't j y']
>>> c=[5,6,7]
>>> a.extend(c)
>>> a
[1, 2, 3, 't j y', 5, 6, 7]
>>> del a[3]
>>> a
[1, 2, 3, 5, 6, 7]
>>> a.insert[3,4]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'builtin_function_or_method' object is not subscriptable
>>> a.insert(3,4)
>>> a
[1, 2, 3, 4, 5, 6, 7]
>>> a.pop()
7
>>> a.pop(0)
1
>>> a=[2,4,3,5]
>>> a.sort()
>>> a
[2, 3, 4, 5]
>>> a.reverse()
>>> a
[5, 4, 3, 2]
>>> a.append(2)
>>> a
[5, 4, 3, 2, 2]
>>> a.count(2)
2
>>> a.index(2)
3
>>> c1=a
>>> c2=a[:]
>>> c3=a.copy()
>>> c1,c2,c3
([5, 4, 3, 2, 2], [5, 4, 3, 2, 2], [5, 4, 3, 2, 2])
>>> a.append(4)
>>> a
[5, 4, 3, 2, 2, 4]
>>> [c1,c2,c3]
[[5, 4, 3, 2, 2, 4], [5, 4, 3, 2, 2], [5, 4, 3, 2, 2]]
>>> c2.append(5)
>>> c3.append(6)
>>> c1,c2,c3
([5, 4, 3, 2, 2, 4], [5, 4, 3, 2, 2, 5], [5, 4, 3, 2, 2, 6])
>>> matrix(c1,c2,c3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'matrix' is not defined
>>> matrix=[c1,c2,c3]
>>> type(matrix)
<class 'list'>
>>> matrix[1][2]
3
>>> [x**2 for x in range(1,11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
>>> m+n for m in 'ABC' for n in 'XYZ']
  File "<stdin>", line 1
    m+n for m in 'ABC' for n in 'XYZ']
          ^
SyntaxError: invalid syntax
>>> [m+n for m in 'ABC' for n in 'XYZ']
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
>>> a={1,1,2,3,'a','a','b'}
>>> a
{1, 2, 3, 'b', 'a'}
>>>
>>> type(a)
<class 'set'>
>>> 'a' in a
True
>>> 'c' in a
False
>>> b={1,3,4,'c','d'}
>>> a|b
{1, 2, 3, 'd', 4, 'a', 'b', 'c'}
>>> a&b
{1, 3}
>>> a & b
{1, 3}
>>> a
{1, 2, 3, 'b', 'a'}
>>> b
{1, 3, 'd', 4, 'c'}
>>> a-b
{'b', 2, 'a'}
>>> a^b
{2, 'd', 4, 'c', 'a', 'b'}
>>> a=set('122abb')
>>> a
{'2', 'a', '1', 'b'}
>>> a=1,'a','b'
>>> type(a)
<class 'tuple'>
>>> b=1,'c'
>>> c=a,b
>>> c
((1, 'a', 'b'), (1, 'c'))
>>> c(0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object is not callable
>>> c[0]
(1, 'a', 'b')
>>> c[1][1]
'c'
>>> c[0]
(1, 'a', 'b')
>>> c[0]=1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> c
((1, 'a', 'b'), (1, 'c'))
>>> c[1][1]=2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> b=[1,'c']
>>> c[0]=1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> c[1][1]=2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> c
((1, 'a', 'b'), (1, 'c'))
>>> c=a,b
>>> c[1][1]=2
>>> c
((1, 'a', 'b'), [1, 2])
>>> tel={'Mike':3759,'Mary':1462,'Ning':6839}
>>> print(tel)
{'Mike': 3759, 'Mary': 1462, 'Ning': 6839}
>>> dict
<class 'dict'>
>>> tel=dict(Mike=3759,Mary=1462,Ning=6839)
>>> tel
{'Mike': 3759, 'Mary': 1462, 'Ning': 6839}
>>> tel=dict([('Mike',3759),('Mary',1462),('Ning,6839)]}
  File "<stdin>", line 1
    tel=dict([('Mike',3759),('Mary',1462),('Ning,6839)]}
                                                       ^
SyntaxError: EOL while scanning string literal
>>> tel=dict([('Mike',3759),('Mary',1462),('Ning',6839)])
>>> tel
{'Mike': 3759, 'Mary': 1462, 'Ning': 6839}
>>> print(tel.keys())
dict_keys(['Mike', 'Mary', 'Ning'])
>>> print(tel.values())
dict_values([3759, 1462, 6839])
>>> list(tel.keys())
['Mike', 'Mary', 'Ning']
>>> sorted(tel.keys())
['Mary', 'Mike', 'Ning']
>>> tel['Mike']
3759
>>> 'Mike' in tel
True
>>> tel['Ada']=8080
>>> tel
{'Mike': 3759, 'Mary': 1462, 'Ning': 6839, 'Ada': 8080}
>>> tel['Ada']=8090
>>> tel
{'Mike': 3759, 'Mary': 1462, 'Ning': 6839, 'Ada': 8090}
>>> del tel['Mary']
>>> tel
{'Mike': 3759, 'Ning': 6839, 'Ada': 8090}
>>> if True:
... print('True')
  File "<stdin>", line 2
    print('True')
        ^
IndentationError: expected an indented block
>>> if True:print('love')
...
love
>>> n=3
>>> if n%2==0:
...  print(n,'even',sep='')
... elif n%2==1:
...  print(n,'odd',sep='')
... else:
...  print(n,'not even or odd',sep='')
...
3odd
>>> a=[x**2 for x in range(1,10)]
>>> n=23
>>> if n in a:
...  print(repr(n)+' is a perfect square')
... else:
...  print(n,' is not a perfect square')
...
23  is not a perfect square
>>> a={3,2,5,7,9,10,8}
>>> for x in a:
...  if x%2==0:
...   continue
...  print(x)
...
3
5
7
9
>>> for i in range(3):
...  print(i)
...
0
1
2
>>> for i in range(5):
...  if 2**i<10:
...   print(i,2**i)
...  else:
...   break
...
0 1
1 2
2 4
3 8
>>> a=range(1,101)
>>> sum=0
>>> for s in a:
...  sum=sum+s
... print(sum)
  File "<stdin>", line 3
    print(sum)
        ^
SyntaxError: invalid syntax
>>> a=range(1,6)
>>> f=1
>>> for s in a:
...  f=f*s
... print(f)
  File "<stdin>", line 3
    print(f)
        ^
SyntaxError: invalid syntax
>>> a=range(1,101)
>>>
>>> sum=0
>>> for s in a:
...  sum=sum+s
...
>>> print(sum)
5050
>>> a=input('Select a number :')
Select a number :3
>>> divisors=[]
>>> m=[value for value in range (1,int(a)+1)]
>>> for s in m:
...  if int(a)%s==0:
...   divisors.append(s)
...
>>> print(divisors)
[1, 3]
>>> a=range(1,6)
>>> factorial=1
>>> for s in a :
...  factorial=factorial*s
...
>>> print(factorial)
120
>>> a=input('Select a number :')
Select a number :6
>>> divisors=[]
>>> m=[value for value in range (1,int(int(a)**(1/2))+1)]
>>> for s in m:
...  if int(a)%s==0:
...   divisors.append(s)
...
>>> divisors.remove(1)
>>> flag='true'
>>> for divisor in divisors:
...  if int(a)%divisor==0:
...   flag='false'
...   break
...
>>> if flag=='true':
...  print(a,' is a prime')
... else:
...  print(a,' is not a prime')
...
6  is not a prime
>>> a = 0
>>> while 2 ** a < 10:
...  print(a,2 ** a)
...  a = a + 1
...
0 1
1 2
2 4
3 8
>>> a=[1,1]
>>> k=3
>>> x=input('请输入项数(3)：')
请输入项数(3)：15
>>> while k<=int(x):
...  b=a[-1]+a[-2]
...  a.append(b)
...  k=k+1
...
>>> print(a)
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]
>>> xx=input('Select an integer:')
Select an integer:24
>>> x=int(xx)
>>> ans=0
>>> if x>0:
...  while ans*ans<x:
...   ans=ans+1
...  if ans**2==x:
...   print('Its square root is '+ repr(ans))
...  else:
...   print('Its not a perfect square ')
... else:
...  print('It is not a positive integer')
...
Its not a perfect square
>>> x=[value for value in range(1,50)]
>>> a=['3k']
>>> b=['3k+1']
>>> c=['3k+2']
>>> t=len(x)
>>> k=1
>>> while k<=t:
...  if x[0]%3==0:
...   a.insert(0,x[0])
...   x.remove(x[0])
...  elif x[0]%3==1:
...   b.insert(0,x[0])
...   x.remove(x[0])
...  else:
...   c.insert(0,x[0])
...   x.remove(x[0])
...  k=k+1
... else:
...  print(a)
...  print(b)
...  print(c)
...
[48, 45, 42, 39, 36, 33, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, '3k']
[49, 46, 43, 40, 37, 34, 31, 28, 25, 22, 19, 16, 13, 10, 7, 4, 1, '3k+1']
[47, 44, 41, 38, 35, 32, 29, 26, 23, 20, 17, 14, 11, 8, 5, 2, '3k+2']
>>> import math
>>> math.exp(0)
1.0
>>> dir(math)
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']
>>> import math as mt
>>> mt.exp(0)
1.0
>>> from math import exp
>>> exp(0)
1.0
>>> from math import exp as myexp
>>> myexp(0)
1.0
>>> import numpy as np
C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\__init__.py:140: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service
  from . import _distributor_init
Traceback (most recent call last):
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\__init__.py", line 24, in <module>
    from . import multiarray
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\multiarray.py", line 14, in <module>
    from . import overrides
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\overrides.py", line 7, in <module>
    from numpy.core._multiarray_umath import (
ImportError: DLL load failed: 找不到指定的模块。

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\__init__.py", line 142, in <module>
    from . import core
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\__init__.py", line 54, in <module>
    raise ImportError(msg)
ImportError:

IMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!

Importing the numpy c-extensions failed.
- Try uninstalling and reinstalling numpy.
- If you have already done that, then:
  1. Check that you expected to use Python3.7 from "C:\Users\wendy.wu\Anaconda3\python.exe",
     and that you have no directories in your PATH or PYTHONPATH that can
     interfere with the Python and numpy version "1.18.1" you're trying to use.
  2. If (1) looks fine, you can open a new issue at
     https://github.com/numpy/numpy/issues.  Please include details on:
     - how you installed Python
     - how you installed numpy
     - your operating system
     - whether or not you have multiple versions of Python installed
     - if you built from source, your compiler versions and ideally a build log

- If you're working with a numpy git repository, try `git clean -xdf`
  (removes all files not under version control) and rebuild numpy.

Note: this error has many possible causes, so please don't comment on
an existing issue about this - open a new one instead.

Original error was: DLL load failed: 找不到指定的 模块。
>>> from scipy import linalg
Traceback (most recent call last):
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\__init__.py", line 24, in <module>
    from . import multiarray
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\multiarray.py", line 14, in <module>
    from . import overrides
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\overrides.py", line 7, in <module>
    from numpy.core._multiarray_umath import (
ImportError: DLL load failed: 找不到指定的模块。

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\scipy\__init__.py", line 63, in <module>
    from numpy import show_config as show_numpy_config
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\__init__.py", line 142, in <module>
    from . import core
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\__init__.py", line 54, in <module>
    raise ImportError(msg)
ImportError:

IMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!

Importing the numpy c-extensions failed.
- Try uninstalling and reinstalling numpy.
- If you have already done that, then:
  1. Check that you expected to use Python3.7 from "C:\Users\wendy.wu\Anaconda3\python.exe",
     and that you have no directories in your PATH or PYTHONPATH that can
     interfere with the Python and numpy version "1.18.1" you're trying to use.
  2. If (1) looks fine, you can open a new issue at
     https://github.com/numpy/numpy/issues.  Please include details on:
     - how you installed Python
     - how you installed numpy
     - your operating system
     - whether or not you have multiple versions of Python installed
     - if you built from source, your compiler versions and ideally a build log

- If you're working with a numpy git repository, try `git clean -xdf`
  (removes all files not under version control) and rebuild numpy.

Note: this error has many possible causes, so please don't comment on
an existing issue about this - open a new one instead.

Original error was: DLL load failed: 找不到指定的 模块。

>>> import matplotlib.pyplot as plt
Traceback (most recent call last):
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\__init__.py", line 24, in <module>
    from . import multiarray
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\multiarray.py", line 14, in <module>
    from . import overrides
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\overrides.py", line 7, in <module>
    from numpy.core._multiarray_umath import (
ImportError: DLL load failed: 找不到指定的模块。

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\matplotlib\__init__.py", line 138, in <module>
    from . import cbook, rcsetup
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\matplotlib\cbook\__init__.py", line 31, in <module>
    import numpy as np
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\__init__.py", line 142, in <module>
    from . import core
  File "C:\Users\wendy.wu\Anaconda3\lib\site-packages\numpy\core\__init__.py", line 54, in <module>
    raise ImportError(msg)
ImportError:

IMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!

Importing the numpy c-extensions failed.
- Try uninstalling and reinstalling numpy.
- If you have already done that, then:
  1. Check that you expected to use Python3.7 from "C:\Users\wendy.wu\Anaconda3\python.exe",
     and that you have no directories in your PATH or PYTHONPATH that can
     interfere with the Python and numpy version "1.18.1" you're trying to use.
  2. If (1) looks fine, you can open a new issue at
     https://github.com/numpy/numpy/issues.  Please include details on:
     - how you installed Python
     - how you installed numpy
     - your operating system
     - whether or not you have multiple versions of Python installed
     - if you built from source, your compiler versions and ideally a build log

- If you're working with a numpy git repository, try `git clean -xdf`
  (removes all files not under version control) and rebuild numpy.

Note: this error has many possible causes, so please don't comment on
an existing issue about this - open a new one instead.

Original error was: DLL load failed: 找不到指定的 模块。

>>> def parity(n):
...  """To judge whether an integer is odd or even."""
...  if n % 2 == 0:
...   print(n,'是偶数',sep = '')
...  elif n % 2 == 1:
...   print(n,'是奇数',sep = '')
...  else:
...   print(n,'既不是奇数也不是偶数',sep = '')
...
>>> help(parity)
Help on function parity in module __main__:

parity(n)
    To judge whether an integer is odd or even.

>>> parity(3)
3是奇数
>>> parity(3.1)
3.1既不是奇数也不是偶数
>>> f = lambda x: x ** 2
>>> f(2)
4
>>> def make_incrementor(n):
...  return lambda x: x + n # 返回一个函数
...
>>> f = make_incrementor(42)
>>> f(0),f(1)
(42, 43)
>>> def move(n, a, b, c):
...  if n == 1:
...   print(a, '-->', c)
...  else:
...   move(n-1, a, c, b)
...   move(1, a, b, c)
...   move(n-1, b, a, c)
...
>>> move(3, 'A', 'B', 'C')
A --> C
A --> B
C --> B
A --> C
B --> A
B --> C
A --> C
>>> def power(x, n=2):
...  s = 1
...  while n > 0:
...   s = s * x
...   n = n - 1
...  return s
...
>>> power(5)
25
>>> power(5,3)
125
>>> import functools
>>> int2 = functools.partial(int, base=2)
>>> int2('1000000')
64
>>> def triangles(n):
...  L = [1]
...  for x in range(n):
...   yield L
...   L = [1] + [L[i] + L[i+1] for i in range(len(L)-1)] + [1]
... for x in triangles(10):
  File "<stdin>", line 6
    for x in triangles(10):
      ^
SyntaxError: invalid syntax
>>> def triangles(n):
...  L = [1]
...  for x in range(n):
...   yield L
...   L = [1] + [L[i] + L[i+1] for i in range(len(L)-1)] + [1]
...
>>> for x in triangles(10):
...  print(x)
...
[1]
[1, 1]
[1, 2, 1]
[1, 3, 3, 1]
[1, 4, 6, 4, 1]
[1, 5, 10, 10, 5, 1]
[1, 6, 15, 20, 15, 6, 1]
[1, 7, 21, 35, 35, 21, 7, 1]
[1, 8, 28, 56, 70, 56, 28, 8, 1]
[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
>>> def add(x, y, f):
...  return f(x) + f(y)
...
>>> add(-5, 6, abs)
11
>>> list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
['1', '2', '3', '4', '5', '6', '7', '8', '9']
>>> def normalize(name):
...  name = name.lower()
...  name = name.capitalize()
...  return name
...
>>> L = ['adam', 'LISA', 'barT']
>>>
>>> list(map(normalize, L))
['Adam', 'Lisa', 'Bart']
>>> from functools import reduce
>>> def prod(L):
...  return reduce(lambda x, y: x * y, L )
...
>>> prod([3, 5, 7, 9])
945
>>> list(filter(lambda x: x % 2 == 1, [1, 2, 4, 5, 6, 9, 10, 15]))
[1, 5, 9, 15]
>>> sorted([36, 5, -12, 9, -21], key=abs)
[5, 9, -12, -21, 36]
>>> students = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]
>>> print(sorted(students, key=lambda x: x[0])) # 按名字
[('Adam', 92), ('Bart', 66), ('Bob', 75), ('Lisa', 88)]
>>> print(sorted(students, key=lambda x: x[1])) # 按成绩从低到高
[('Bart', 66), ('Bob', 75), ('Lisa', 88), ('Adam', 92)]
>>> print(sorted(students, key=lambda x: x[1], reverse=True))
[('Adam', 92), ('Lisa', 88), ('Bob', 75), ('Bart', 66)]
>>> class MyClass:
...  """A simple example class"""
...  i = 12345
...  def f(self):
...   return 'hello world'
...
>>> MyClass()
<__main__.MyClass object at 0x00000285A7947E48>
>>> MyClass.i
12345
>>> MyClass.f
<function MyClass.f at 0x00000285A76B5288>
>>> MyClass.i = 3
>>> MyClass.i
3
>>> MyClass.x = 1
>>> MyClass.x
1
>>> class Complex:
... def __init__(self, realpart, imagpart):
  File "<stdin>", line 2
    def __init__(self, realpart, imagpart):
      ^
IndentationError: expected an indented block
>>> class Complex:
...  def __init__(self, realpart, imagpart):
...   self.r = realpart
...   self.i = imagpart
...
>>> x = Complex(3.0, -4.5)
>>> x.r, x.i
(3.0, -4.5)
>>> pwd
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pwd' is not defined